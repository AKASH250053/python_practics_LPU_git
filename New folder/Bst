Certainly! Here's a simple implementation of a Binary Search Tree (BST) in Python:

```python
class TreeNode:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None

    def insert(self, key):
        self.root = self._insert(self.root, key)

    def _insert(self, root, key):
        if root is None:
            return TreeNode(key)
        
        if key < root.key:
            root.left = self._insert(root.left, key)
        elif key > root.key:
            root.right = self._insert(root.right, key)
        
        return root

    def search(self, key):
        return self._search(self.root, key)

    def _search(self, root, key):
        if root is None or root.key == key:
            return root

        if key < root.key:
            return self._search(root.left, key)
        else:
            return self._search(root.right, key)

# Example usage:
bst = BST()
bst.insert(5)
bst.insert(3)
bst.insert(7)

print(bst.search(3))  # Output: <__main__.TreeNode object at 0x...>
```

This code defines a basic BST with insertion and search operations. You can use it as a starting point and extend it with additional functionalities as needed.
